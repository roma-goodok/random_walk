swirl()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mdf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "IN" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os = "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA, 10))
!is.na(c(3,5,NA, 10))
filter(cran, !is.na(r_version))
cran2 <- cfilter(cran, size:ip_id)
cran2 <- filter(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mg = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_nb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
install.packages("swirl")
library(swirl)
library(swirl)
swirl()
swirl()
>InstallCourses
InstallCourses
?InstallCourses
uninstall_all_courses()
install_from_swirl("Exploratory_Data_Analysis")
install_from_swirl("Statistical_Inference")
install_from_swirl("Regression_Models")
swirl()
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
coinPlot(10)
coinPlot(1000)
coinPlot(10000)
qnorm(0.95)
0.6 + c(-1,1)*qnorm(0.975)*sqrt(0.6*0.4/100)
binom.test(60,100)$conf
binom.test(60,100)$conf.int
mywald(0.2)
ACCompar(20)
lamb
lamb <- 5/94.32
lamb +c(-1,1)*qnorm(0.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)
poisson.test(5,94.32)$conf
swirl()
swirl()
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(0.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn + c(-1,1)*qt(0.975, 9)*s/sqrt(10
)
t.test(difference)$conf.inf
t.test(difference)$conf.int
sp <-(8-1)*15.34^2 + (21-1)*18.23^2
ns <- (8-1) + (21-1)
sp <- sqrt(sp/ns)
132.86 - 127.4 + c(-1,1)*qt(0.975, 8+21-2)*sp*sqrt(1/8 + 1/21)
132.86 - 127.4 + c(-1,1)*qt(0.975, ns)*sp*sqrt(1/8 + 1/21)
132.86 - 127.44 + c(-1,1)*qt(0.975, ns)*sp*sqrt(1/8 + 1/21)
sp <- sqrt((9*var(g1)+9*(var(g2)))/18)
sp <- sqrt((9*var(g1)+9*(var(g2)))/18)
sp <- sqrt((9*var(g1)+9*(var(g2))/18)
)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1)*qt(0.975,18)*sp*sqrt(1/10 + 1/10)
t.test(g2, g1, paired = FALSE)
t.test(g2, g1, paired = FALSE, ver.equal=TRUE)$conf
t.test(g2, g1, paired = FALSE, ver.equal=TRUE)$conf.int
t.test(g2, g1, paired = FALSE, ver.equal=TRUE)$conf
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf.int
t.test(g2,g1,paired=TRUE)$conf
num <- sqrt(15.34/8 + 18.23/21)
num <- (15.34^2/8 + 18.23^2/21)^2
den <- (15.34^2/8)^2/(8-1) + ((18.23^2)/21)^2/(21-1)
mydf <- num/den
132.86-127.44 + c(-1,1)*qt(0.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
setwd("/home/roma/p/coursera/devdataprod")
author("random_walk")
publish_github("roma-goodok", "random_walk")
publish_github("roma-goodok", "random_walk")
slidify("index.Rmd")
browseURL("index.html")
publish_github("roma-goodok", "random_walk")
?publish_github
publish_github("random_walk", "roma-goodok")
setwd("/home/roma/p/coursera/devdataprod/random_walk_app")
library(shiny)
runApp()
library(shinyapps)
shinyapps::deployApp('/home/roma/p/coursera/devdataprod')
setwd("/home/roma/p/coursera/devdataprod/random_walk_app")
dir()
?deployApp
shinyapps::deployApp('/home/roma/p/coursera/devdataprod/random_walk_app')
runApp()
?p
?a
runApp()
runApp()
runApp()
runApp()
runApp()
?p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyapps::deployApp('/home/roma/p/coursera/devdataprod/random_walk_app')
shinyapps::deployApp('/home/roma/p/coursera/devdataprod/random_walk_app')
slidify("index.Rmd")
setwd("/home/roma/p/coursera/devdataprod")
slidify("index.Rmd")
setwd("/home/roma/p/coursera/devdataprod/random_walk")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
time_length = 1000;
sigma = 1;
mu = 0
sim_result <- data.frame(t=rep(1:time_length, n_experiments), y=0)
set.seed(42)
current_value = 0; # start new random walk from zero level
for (ind in 1:time_length)
{
delta = rnorm(1,mu,sigma);
current_value = current_value + delta;
index = ind
sim_result[index,]$y <- current_value
}
#prepare dataframe with coefficients in order to diplay in ggplot using common colors for geom_abline and geom_line
g <- ggplot(sim_result, aes(x=t, y=y)) + geom_line()
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
g <- ggplot(sim_result, aes(x=t, y=y, color= "red")) + geom_line()
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
g <- ggplot(sim_result, aes(x=t, y=y)) + geom_line()
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
set.seed(43)
current_value = 0; # start new random walk from zero level
for (ind in 1:time_length)
{
delta = rnorm(1,mu,sigma);
current_value = current_value + delta;
index = ind
sim_result[index,]$y <- current_value
}
#prepare dataframe with coefficients in order to diplay in ggplot using common colors for geom_abline and geom_line
g <- ggplot(sim_result, aes(x=t, y=y)) + geom_line()
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
set.seed(44)
current_value = 0; # start new random walk from zero level
for (ind in 1:time_length)
{
delta = rnorm(1,mu,sigma);
current_value = current_value + delta;
index = ind
sim_result[index,]$y <- current_value
}
#prepare dataframe with coefficients in order to diplay in ggplot using common colors for geom_abline and geom_line
g <- ggplot(sim_result, aes(x=t, y=y)) + geom_line()
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
set.seed(44)
current_value = 0; # start new random walk from zero level
for (ind in 1:time_length)
{
delta = rnorm(1,mu,sigma);
current_value = current_value + delta;
index = ind
sim_result[index,]$y <- current_value
}
#prepare dataframe with coefficients in order to diplay in ggplot using common colors for geom_abline and geom_line
g <- ggplot(sim_result, aes(x=t, y=y)) + geom_line()
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
?geom_line
g <- ggplot(sim_result, aes(x=t, y=y)) + geom_line(linetype=1)
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
g <- ggplot(sim_result, aes(x=t, y=y)) + geom_line(linetype=1, color = "blue")
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
g <- ggplot(sim_result, aes(x=t, y=y)) + geom_point(linetype=1, color = "blue")
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
g <- ggplot(sim_result, aes(x=t, y=y)) + geom_line(linetype=1, color = "blue")
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
qplot(t, y, data=dataframe, geom="line")
qplot(t, y, data=sim_result, geom="line")
qplot(t, y, data=sim_result, geom="segment")
qplot(t, as.factor(y), data=sim_result, geom="line")
qplot(t, as.integer(y), data=sim_result, geom="line")
qplot(t, y, data=sim_result, geom="line")
?geom_line
g <- ggplot(sim_result, aes(x=t, y=y)) + ?geom_line(linetype=2, color = "blue")
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
g <- ggplot(sim_result, aes(x=t, y=y)) + ?geom_line(linetype=2, color = "blue", fill=NA)
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
g <- ggplot(sim_result, aes(x=t, y=y)) + geom_line(linetype=2, color = "blue", fill=NA)
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
sim_result
g <- ggplot(sim_result, aes(y=y)) + geom_line(linetype=2, color = "blue")
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
g <- ggplot(sim_result, aes(x=t, y=y)) + geom_line(linetype=2, color = "blue")
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
g <- ggplot(sim_result, aes(x=t, y=y)) + geom_line(linetype=2, color = "blue")
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
ggplot(sim_result, aes(x=t, y=y)) + geom_line(linetype=2, color = "blue")
g <- ggplot(sim_result, aes(x=t, y=y)) + geom_line()
ggplot(sim_result, aes(x=t, y=y)) + geom_line()
g <- ggplot(data = sim_result, aes = aes(x=t, y=y)) + geom_line()
g
ggplot(data = sim_result, aes(x=t, y=y)) + geom_line()
ggplot(data = sim_result, aes(x=t, y=y)) + geom_path()
ggplot(data = sim_result, aes(y=y)) + geom_path()
sim_result
1:time_length
time_length = 1000;
sigma = 1;
mu = 0
sim_result <- data.frame(t=c(1:time_length), y=0)
set.seed(44)
current_value = 0; # start new random walk from zero level
for (ind in 1:time_length)
{
delta = rnorm(1,mu,sigma);
current_value = current_value + delta;
index = ind
sim_result[index,]$y <- current_value
}
sim_result
g <- ggplot(data = sim_result, aes(x=t, y=y)) + geom_line()
g <- g + labs(title = "Sample simulation of Gaussian Random Walk process", x = "time", y = "distance from start")
g
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
mu <- 0
time_length = 1000;
train_regression_period_percentage <- 1000
sigma = 1;
n_experiments = 5;
sim_result <- data.frame(t=rep(1:time_length, n_experiments), y=0, experiment_id = as.factor(rep(1:n_experiments, each=time_length)))
set.seed(42)
for (experiment_id in 1:n_experiments) {
current_value = 0; # start new random walk from zero level
for (ind in 1:time_length)
{
delta = rnorm(1,mu,sigma);
current_value = current_value + delta;
index = ind + (experiment_id-1)*time_length; # calculate position in the dataframe
sim_result[index,]$y <- current_value
sim_result[index,]$experiment_id <- experiment_id
}
}
#prepare dataframe with coefficients in order to diplay in ggplot using common colors for geom_abline and geom_line
coeff_df <- data.frame(experiment_id = unique(sim_result$experiment_id), intercept = 0, slope = 0, x = 0, xend = 0, y = 0, yend = 0);
models = list()
for (id in 1:n_experiments) {
first_half <- dplyr::filter(tbl_df(sim_result), experiment_id == id, t <= time_length*train_regression_period_percentage )
lm_fit <- lm(y ~ t, first_half)
coeff_df[id,]$intercept = lm_fit$coefficients[1];
coeff_df[id,]$slope = lm_fit$coefficients[2];
models[[id]] = lm_fit
x = 0; xend = time_length*train_regression_period_percentage;
pred <- predict(lm_fit, data.frame(t = c(x,xend)))
y = pred[1]
yend = pred[2]
coeff_df[id,]$x = x;
coeff_df[id,]$xend = xend;
coeff_df[id,]$y = y;
coeff_df[id,]$yend = yend;
}
g <- ggplot(sim_result, aes(x=t, y=y, color = experiment_id)) + geom_line()
g <- g + geom_abline(data = coeff_df, aes(intercept = intercept, slope = slope, color= experiment_id), linetype = 2) # plot linear extrapolation fitted by using half of time series
g <- g + geom_segment(data = coeff_df, aes(x = x, xend = xend, y=y, yend = yend, color= experiment_id), linetype = 1, size = 1, arrow=arrow()) # linear regression
g <- g + geom_vline(xintercept = time_length*train_regression_period_percentage, color = "black", alpha = 1/2) # to show half time
g <- g + geom_vline(xintercept = time_length, color = "blue", alpha = 1/2) # to end of period
g <- g + labs(title = "result of simmulation random walk process", x = "time", y = "distance from start")
g
sim_result
mu <- 0
time_length = 1000;
train_regression_period_percentage <- 700
sigma = 1;
n_experiments = 5;
sim_result <- data.frame(t=rep(1:time_length, n_experiments), y=0, experiment_id = as.factor(rep(1:n_experiments, each=time_length)))
sim_result
set.seed(42)
for (experiment_id in 1:n_experiments) {
current_value = 0; # start new random walk from zero level
for (ind in 1:time_length)
{
delta = rnorm(1,mu,sigma);
current_value = current_value + delta;
index = ind + (experiment_id-1)*time_length; # calculate position in the dataframe
sim_result[index,]$y <- current_value
sim_result[index,]$experiment_id <- experiment_id
}
}
sim_result
#prepare dataframe with coefficients in order to diplay in ggplot using common colors for geom_abline and geom_line
coeff_df <- data.frame(experiment_id = unique(sim_result$experiment_id), intercept = 0, slope = 0, x = 0, xend = 0, y = 0, yend = 0);
models = list()
for (id in 1:n_experiments) {
first_half <- dplyr::filter(tbl_df(sim_result), experiment_id == id, t <= time_length*train_regression_period_percentage )
lm_fit <- lm(y ~ t, first_half)
coeff_df[id,]$intercept = lm_fit$coefficients[1];
coeff_df[id,]$slope = lm_fit$coefficients[2];
models[[id]] = lm_fit
x = 0; xend = time_length*train_regression_period_percentage;
pred <- predict(lm_fit, data.frame(t = c(x,xend)))
y = pred[1]
yend = pred[2]
coeff_df[id,]$x = x;
coeff_df[id,]$xend = xend;
coeff_df[id,]$y = y;
coeff_df[id,]$yend = yend;
}
ggplot(sim_result, aes(x=t, y=y, color = experiment_id)) + geom_line()
g <- g + geom_abline(data = coeff_df, aes(intercept = intercept, slope = slope, color= experiment_id), linetype = 2) # plot linear extrapolation fitted by using
g <- g + geom_segment(data = coeff_df, aes(x = x, xend = xend, y=y, yend = yend, color= experiment_id), linetype = 1, size = 1, arrow=arrow()) # linear
g
g <- ggplot(sim_result, aes(x=t, y=y, color = experiment_id)) + geom_line()
g
g + geom_abline(data = coeff_df, aes(intercept = intercept, slope = slope, color= experiment_id), linetype = 2) # plot linear extrapolation fitted by using
g <- g + geom_abline(data = coeff_df, aes(intercept = intercept, slope = slope, color= experiment_id), linetype = 2) # plot linear extrapolation fitted by using
g
g <- g + geom_segment(data = coeff_df, aes(x = x, xend = xend, y=y, yend = yend, color= experiment_id), linetype = 1, size = 1, arrow=arrow()) # linear
g
g <- ggplot(sim_result, aes(x=t, y=y, color = experiment_id)) + geom_line()
g <- g + geom_abline(data = coeff_df, aes(intercept = intercept, slope = slope, color= experiment_id), linetype = 2) # plot linear extrapolation fitted by using
g
g <- g + geom_vline(xintercept = time_length*train_regression_period_percentage, color = "black", alpha = 1/2) # to show half time
g
g <- g + geom_vline(xintercept = time_length, color = "blue", alpha = 1/2) # to end of period
g
g <- g + labs(title = "result of simmulation random walk process", x = "time", y = "distance from start")
g
g
g <- ggplot(sim_result, aes(x=t, y=y, color = experiment_id)) + geom_line()
g <- g + geom_abline(data = coeff_df, aes(intercept = intercept, slope = slope, color= experiment_id), linetype = 2) # plot linear extrapolation fitted by using half of time series
#g <- g + geom_segment(data = coeff_df, aes(x = x, xend = xend, y=y, yend = yend, color= experiment_id), linetype = 1, size = 1, arrow=arrow()) # linear regression
#g <- g + geom_vline(xintercept = time_length*train_regression_period_percentage, color = "black", alpha = 1/2) # to show half time
#g <- g + geom_vline(xintercept = time_length, color = "blue", alpha = 1/2) # to end of period
g <- g + labs(title = "result of simmulation random walk process", x = "time", y = "distance from start")
g
mu <- 0
time_length = 1000;
train_regression_period_percentage <- 0.7
sigma = 1;
n_experiments = 5;
sim_result <- data.frame(t=rep(1:time_length, n_experiments), y=0, experiment_id = as.factor(rep(1:n_experiments, each=time_length)))
set.seed(42)
for (experiment_id in 1:n_experiments) {
current_value = 0; # start new random walk from zero level
for (ind in 1:time_length)
{
delta = rnorm(1,mu,sigma);
current_value = current_value + delta;
index = ind + (experiment_id-1)*time_length; # calculate position in the dataframe
sim_result[index,]$y <- current_value
sim_result[index,]$experiment_id <- experiment_id
}
}
#prepare dataframe with coefficients in order to diplay in ggplot using common colors for geom_abline and geom_line
coeff_df <- data.frame(experiment_id = unique(sim_result$experiment_id), intercept = 0, slope = 0, x = 0, xend = 0, y = 0, yend = 0);
models = list()
for (id in 1:n_experiments) {
first_half <- dplyr::filter(tbl_df(sim_result), experiment_id == id, t <= time_length*train_regression_period_percentage )
lm_fit <- lm(y ~ t, first_half)
coeff_df[id,]$intercept = lm_fit$coefficients[1];
coeff_df[id,]$slope = lm_fit$coefficients[2];
models[[id]] = lm_fit
x = 0; xend = time_length*train_regression_period_percentage;
pred <- predict(lm_fit, data.frame(t = c(x,xend)))
y = pred[1]
yend = pred[2]
coeff_df[id,]$x = x;
coeff_df[id,]$xend = xend;
coeff_df[id,]$y = y;
coeff_df[id,]$yend = yend;
}
g <- ggplot(sim_result, aes(x=t, y=y, color = experiment_id)) + geom_line()
g <- g + geom_abline(data = coeff_df, aes(intercept = intercept, slope = slope, color= experiment_id), linetype = 2)
g
g <- g + geom_segment(data = coeff_df, aes(x = x, xend = xend, y=y, yend = yend, color= experiment_id), linetype = 1, size = 1, arrow=arrow()) # linear
g
g <- g + geom_vline(xintercept = time_length*train_regression_period_percentage, color = "black", alpha = 1/2) # to show half time
g <- g + geom_vline(xintercept = time_length, color = "blue", alpha = 1/2) # to end of period
g <- g + labs(title = "result of simmulation random walk process", x = "time", y = "distance from start")
g
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish_github("random_walk", "roma-goodok")
publish_github("random_walk", "roma-goodok")
publish_github("random_walk", "roma-goodok")
publish_github("random_walk", "roma-goodok")
slidify("index.Rmd")
browseURL("index.html")
publish_github("random_walk", "roma-goodok")
publish_github("random_walk", "roma-goodok")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("/home/roma/p/coursera/devdataprod/random_walk")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
